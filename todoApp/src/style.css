:root {
    --anim-time: 0.5s;
}

html {
    background: rgb(171,65,37);
    background: linear-gradient(90deg, rgba(171,65,37,1) 19%, rgba(208,197,163,1) 62%, rgba(243,255,0,1) 95%); 
}

body {
    display: flex;
    flex-direction: column;
    align-items: center;
    margin: 0 10vw 0 10vw;
}


header {
    display: flex;
    align-items: center;
    gap: 20px;
    margin-top: 7vh;
}

h1 {
    font-family: Chalkduster, fantasy
}

#todo-font-dropdown {
    width: 100px;
    height: 20px;
    text-align: center;
}

#main-content {
    display: flex;
    flex-direction: column;
    gap: 10px;
    margin-bottom: 3vh;
    align-items: center;
}


#main-form {
    display: flex;
    flex-direction: column;
    align-items: center;
}

#todo-input-wrapper {
    display: flex;
    gap: 15px;
    align-items: center;

}

#todo-label {
    font-family: Chalkduster, fantasy;
    font-size: 30px;
}

#todo-input {
    width: 40vw;
    height: 4vh;
}

#todo-font-dropdown {
    width:13vw;
    height:4vh;
    border:0 solid;
    border-radius:10px;
}

.cool-button,
.cool-button *,
.cool-button :after,
.cool-button :before,
.cool-button:after,
.cool-button:before {
  border: 0 solid;
  box-sizing: border-box;
}
.cool-button {
  -webkit-tap-highlight-color: transparent;
  background-color: #000;
  background-image: none;
  color: #fff;
  font-family: ui-sans-serif, system-ui, -apple-system, BlinkMacSystemFont,
    Segoe UI, Roboto, Helvetica Neue, Arial, Noto Sans, sans-serif,
    Apple Color Emoji, Segoe UI Emoji, Segoe UI Symbol, Noto Color Emoji;
  font-size: 100%;
  font-weight: 900;
  line-height: 1.5;
  margin: 0;
  mask-image: -webkit-radial-gradient(#000, #fff);
  padding: 0;
  text-transform: uppercase;
}
.cool-button:disabled {
  cursor: default;
}
.cool-button:-moz-focusring {
  outline: auto;
}
.cool-button svg {
  vertical-align: middle;
}
.cool-button [hidden] {
  display: none;
}
.cool-button {
  --thickness: 0.3rem;
  --roundness: 1.2rem;
  --color: #eff6ff;
  --opacity: 0.6;
  -webkit-backdrop-filter: blur(100px);
  backdrop-filter: blur(100px);
  background: none;
  background: hsla(0, 0%, 100%, 0.2);
  border: none;
  border-radius: var(--roundness);
  color: var(--color);
  cursor: pointer;
  display: block;
  font-family: Poppins, "sans-serif";
  font-size: 1rem;
  font-weight: 500;
  padding: 0.8rem 3rem;
  position: relative;
}

.cool-button:active {
  --opacity: 0;
  background: hsla(0, 0%, 100%, 0.1);
}
.cool-button svg {
  border-radius: var(--roundness);
  display: block;
  filter: url(#glow);
  height: 100%;
  left: 0;
  position: absolute;
  top: 0;
  width: 100%;
}
.cool-button rect {
  fill: none;

  stroke: var(--color);
  stroke-width: var(--thickness);
  stroke-linejoin: round;
  stroke-dasharray: 185%;
  stroke-dashoffset: 80;

  -webkit-animation: snake 2s linear infinite;
  animation: snake 2s linear infinite;
  -webkit-animation-play-state: paused;
  animation-play-state: paused;
  height: 100%;
  opacity: 0;
  transition: opacity 0.2s;
  width: 100%;
}
.cool-button:hover rect {
  -webkit-animation-play-state: running;
  animation-play-state: running;
  opacity: var(--opacity);
}


#submit {
    margin: 5vh 0 2.5vh 0;
}

#or-text {
    font-family: monospace;
    font-size: 30px;
    padding-left: 3vw;
}

#or-dots {
    font-family: monospace;
    font-size: 30px;
    clip-path: inset(0 3ch 0 0);
    animation: animateDots 1s steps(4) infinite;
}



#todo-items {
    display: flex;
    flex-direction: column;
    padding: 10px 6px 10px 6px;
    width: 500px;
    border: 4mm ridge;
    font-family: Optima, sans-serif
}

.todo-item-wrapper {
    display: flex;
    align-items: flex-start;

}

.todo-remove {
    height: 20px;
    width: 20px;
    background-color: red;
    border: none;
}

/* Matches all elems that start with todo-item-wrapper */
[class^="todo-item-wrapper-"] {
    display: flex;
    gap: 10px;
}


/* Animations */

@-webkit-keyframes snake {
    to {
        stroke-dashoffset: 370%;
    }
}

@keyframes snake {
    to {
        stroke-dashoffset: 370%;
    }
}

@keyframes slideFromTop {
    from {
        transform: translateY(-50px);
        opacity: 0;
    }

    to {
        transform: translateY(0px);
        opacity: 100%;
    }
}

@keyframes slideFromBottom {
    from {
        transform: translateY(50px);
        opacity: 0;
    }

    to {
        opacity: 100%;
        transform: translateY(0);
    }
}

@keyframes slideFromRight {
    from {
        transform: translateX(50px);
        opacity: 0;
    }

    to {
        transform: translateX(0px);
        opacity: 100%;
    }
}


@keyframes slideFromLeft {
    from {
        transform: translateX(-50px);
        opacity: 0;
    }

    to {
        transform: translateX(0px);
        opacity: 100%;
    }
}

@keyframes slideFromTopLeft {
    from {
        transform: translate(-50px, -50px);
        opacity: 0;
    }

    to {
        transform: translate(0);
        opacity: 100%;
    }
}

@keyframes slideFromTopRight {
    from {
        transform: translate(50px, -50px);
        opacity: 0;
    }

    to {
        transform: translate(0);
        opacity: 100%;
    }
}

@keyframes slideFromBottomLeft {
    from {
        transform: translate(-50px, 50px);
        opacity: 0;
    }

    to {
        transform: translate(0);
        opacity: 100%;
    }
}

@keyframes slideFromBottomRight {
    from {
        transform: translate(50px, 50px);
        opacity: 0;
    }

    to {
        transform: translate(0);
        opacity: 100%;
    }
}

.slideFromTop {
    animation: slideFromTop var(--anim-time) linear;
}

.slideFromBottom {
    animation: slideFromBottom var(--anim-time) linear;
}

.slideFromLeft {
    animation: slideFromLeft var(--anim-time) linear;
}

.slideFromRight {
    animation: slideFromRight var(--anim-time) linear;
}

.slideFromTopLeft {
    animation: slideFromTopLeft var(--anim-time) linear;
}

.slideFromTopRight {
    animation: slideFromTopRight var(--anim-time) linear;
}

.slideFromBottomLeft {
    animation: slideFromBottomLeft var(--anim-time) linear;
}

.slideFromBottomRight {
    animation: slideFromBottomRight var(--anim-time) linear;
}


@keyframes animateDots {
    to {
        clip-path: inset(0 -1ch 0 0)
    }
}